<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="course">
        <RemoteCourse>
          <option name="adaptive" value="false" />
          <option name="additionalMaterialsUpdateDate" value="1532887038000" />
          <option name="authors">
            <list>
              <StepicUser>
                <option name="accessToken" value="" />
                <option name="firstName" value="Henry" />
                <option name="guest" value="false" />
                <option name="id" value="53842464" />
                <option name="lastName" value="Oliver-Edwards" />
                <option name="refreshToken" value="" />
              </StepicUser>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="Introduction course to Python.&#10;&#10;Note: We’re sorry, but this course feels a little incomplete. If you are the owner of the course please &lt;a href=&quot;mailto:Tatiana.Vasilyeva@jetbrains.com&quot;&gt;get in touch with us&lt;/a&gt;, we would like to verify this with you; we think with improvement this can be listed as a featured course in the future." />
          <option name="id" value="21421" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="53842464" />
            </list>
          </option>
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="Introduction to Python" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list />
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm5 Python" />
          <option name="updateDate" value="1532887380000" />
          <option name="items">
            <list>
              <Section>
                <option name="course" value="21421" />
                <option name="customPresentableName" />
                <option name="id" value="33220" />
                <option name="index" value="1" />
                <option name="name" value="Introduction to Python Smallpiece 2018" />
                <option name="position" value="1" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1532887380000" />
                <option name="units">
                  <list>
                    <option value="93090" />
                    <option value="93091" />
                    <option value="93092" />
                    <option value="93093" />
                    <option value="93094" />
                    <option value="93095" />
                    <option value="93096" />
                  </list>
                </option>
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118661" />
                      <option name="index" value="1" />
                      <option name="name" value="Introduction" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887368000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Traditionally the first program you write in any programming language is &lt;code&gt;&quot;Hello World!&quot;&lt;/code&gt;.&#10;&lt;br&gt;&lt;br&gt;&#10;Introduce yourself to the World.&#10;&lt;br&gt;&lt;br&gt;&#10;Hint: To run a script сhoose 'Run &amp;lt;name&amp;gt;' on the context menu. &lt;br&gt;&#10;For more information visit &lt;a href=&quot;https://www.jetbrains.com/help/pycharm/running-and-rerunning-applications.html&quot;&gt;our help&lt;/a&gt;.&#10;&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Our first program" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="407170" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_initial():&#10;    window = get_answer_placeholders()[0]&#10;    if window == &quot;type your name&quot;:&#10;        failed(&quot;You should modify the file&quot;)&#10;    else:&#10;        passed()&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;You should enter your name&quot;)&#10;    test_initial()&#10;&#10;&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887368000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="hello_world.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Type your name here." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="14" />
                                                <option name="offset" value="32" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="4" />
                                            <option name="offset" value="32" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type your name" />
                                            <option name="possibleAnswer" value="Liana" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="hello_world.py" />
                                      <option name="text" value="print(&quot;Hello, world! My name is type your name&quot;)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Comments in Python start with the hash character (&lt;code&gt;#&lt;/code&gt;) and include the whole line.&#10;You can use Ctrl + / to comment or uncomment the whole line in PyCharm.&#10;&lt;br&gt;&lt;br&gt;&#10;Add a new comment to the file.&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Comments" />
                            <option name="status" value="Solved" />
                            <option name="stepId" value="407171" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;You should type new comment&quot;)&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887368000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="comments.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Type your new comment here." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="20" />
                                                <option name="offset" value="138" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="4" />
                                            <option name="offset" value="138" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="add new comment here" />
                                            <option name="possibleAnswer" value="new comment" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="comments.py" />
                                      <option name="text" value="# This is the comment for the comments.py file&#10;print(&quot;Hello!&quot;)  # this comment is for the second line&#10;&#10;print(&quot;# this is not a comment&quot;)&#10;# add new comment here&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93090" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118662" />
                      <option name="index" value="2" />
                      <option name="name" value="Variables" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887373000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Variables are used to store values so we can refer to them later. A variable is like a label, and you use the '&lt;code&gt;=&lt;/code&gt;' symbol,&#10;known as the assignment operator, to assign a value to a variable. An assignment can be chained, e.g. &lt;code&gt;a = b = 2&lt;/code&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;Change the value stored in the variable &lt;code&gt;greetings&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Variable definition" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407172" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_task_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;another value&quot; == window:&#10;      failed(&quot;You should redefine the variable 'greetings'&quot;)&#10;    else:&#10;      passed()&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;&#10;    if file.greetings == &quot;greetings&quot;:&#10;        failed(&quot;You should assign a different value to the variable&quot;)&#10;    else:&#10;        passed()&#10;&#10;if __name__ == '__main__':&#10;    test_task_window()&#10;    run_common_tests(&quot;You should redefine the variable 'greetings'&quot;)&#10;    test_value()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887370000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="variable_definition.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Type value here." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="13" />
                                                <option name="offset" value="345" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="13" />
                                            <option name="offset" value="345" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="another value" />
                                            <option name="possibleAnswer" value="5" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="variable_definition.py" />
                                      <option name="text" value="a = b = 2  # This is called a &quot;chained assignment&quot;. It assigns the value 2 to variables &quot;a&quot; and &quot;b&quot;.&#10;print(&quot;a = &quot; + str(a))   # We'll explain the expression str(a) later in the course. For now it is used to convert the  variable &quot;a&quot; to a string.&#10;print(&quot;b = &quot; + str(b))&#10;&#10;greetings = &quot;greetings&quot;&#10;print(&quot;greetings = &quot; + str(greetings))&#10;greetings = another value&#10;print(&quot;greetings = &quot; + str(greetings))&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Variable names may only contain letters, digits, and/or the underscore character, and cannot start with a digit.&#10;&lt;br&gt;&lt;br&gt;&#10;Check what happens if you use a variable which is not defined yet. Try to print out an undefined name.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Undefined variable" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407173" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import test_is_not_empty, test_answer_placeholders_text_deleted, passed, failed, import_task_file&#10;&#10;&#10;def test_is_identifier():&#10;    try:&#10;        import_task_file()&#10;    except NameError:&#10;        passed()&#10;        return&#10;    except SyntaxError:&#10;        failed(&quot;Used invalid identifier&quot;)&#10;        return&#10;    failed(&quot;Use undefined variable&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    error_text = &quot;You should type undefined variable here&quot;&#10;&#10;    test_is_not_empty()&#10;    test_answer_placeholders_text_deleted(error_text)&#10;    test_is_identifier()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887371000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="undefined_variable.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Type the name of an undefined variable here. Note that variable names must start with a letter and may contain letters, '_' and/or numbers." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="14" />
                                                <option name="offset" value="19" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="14" />
                                            <option name="offset" value="19" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="other variable" />
                                            <option name="possibleAnswer" value="other_variable" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="undefined_variable.py" />
                                      <option name="text" value="variable = 1&#10;print(other variable)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;In Python, there are two main types of numbers: integers and floats.&#10;The most important difference between them is that a float is a number that has a decimal point, and an int is a number&#10;without a decimal point.&#10;&lt;br&gt;&lt;br&gt;&#10;Determine the type of the variable &lt;code&gt;float_number&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Variable types" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407174" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, get_answer_placeholders, passed, failed&#10;&#10;&#10;def test_type_used():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;type&quot; in window and &quot;float_number&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use the type() function&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_type_used()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887372000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="variable_type.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Look how we found the &quot;number&quot; type on line 2 and do the same to float_number." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="17" />
                                                <option name="offset" value="93" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="17" />
                                            <option name="offset" value="93" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="float_number type" />
                                            <option name="possibleAnswer" value="type(float_number)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="variable_type.py" />
                                      <option name="text" value="number = 9&#10;print(type(number))   # print type of variable &quot;number&quot;&#10;&#10;float_number = 9.0&#10;print(float_number type)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;There are several built-in functions that let you convert one data type to another.&#10;These functions return a new object representing the converted value.&#10;&lt;code&gt;int(x)&lt;/code&gt; converts &lt;code&gt;x&lt;/code&gt; to an integer.&#10;&lt;code&gt;float(x)&lt;/code&gt; converts &lt;code&gt;x&lt;/code&gt; to a floating-point number.&#10;&lt;code&gt;str(x)&lt;/code&gt; converts object &lt;code&gt;x&lt;/code&gt; to a string representation.&#10;&lt;br&gt;&lt;br&gt;&#10;Convert &lt;code&gt;float_number&lt;/code&gt; to integer.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Type conversion" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407175" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, get_answer_placeholders, passed, failed&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;int&quot; in window and &quot;float_number&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use the int() function&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887372000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="type_cast.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use int() function." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="31" />
                                                <option name="offset" value="113" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="31" />
                                            <option name="offset" value="113" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Convert float_number to integer" />
                                            <option name="possibleAnswer" value="int(float_number)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="type_cast.py" />
                                      <option name="text" value="number = 9&#10;print(type(number))   # print type of variable &quot;number&quot;&#10;&#10;float_number = 9.0&#10;print(float_number)&#10;print(Convert float_number to integer)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Just as with any other programming language, the addition (&lt;code&gt;+&lt;/code&gt;), subtraction (&lt;code&gt;-&lt;/code&gt;), multiplication (&lt;code&gt;*&lt;/code&gt;), and division (&lt;code&gt;/&lt;/code&gt;) operators can be used with numbers.&#10;In addition Python has the power (&lt;code&gt;**&lt;/code&gt;) and modulo (&lt;code&gt;%&lt;/code&gt;) operators.&#10;&lt;br&gt;&lt;br&gt;&#10;Divide the value stored in the variable &lt;code&gt;number&lt;/code&gt; by &lt;code&gt;2&lt;/code&gt;, and then calculate the remainder.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Arithmetic operators" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407176" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_division():&#10;    file = import_task_file()&#10;    if file.result == 4.5:&#10;        passed()&#10;    else:&#10;        failed(&quot;Wrong result&quot;)&#10;&#10;&#10;def test_remainder():&#10;    file = import_task_file()&#10;    if file.remainder == 1.0:&#10;        passed()&#10;    else:&#10;        failed(&quot;Wrong remainder&quot;)&#10;&#10;&#10;def test_windows():&#10;    windows = get_answer_placeholders()&#10;    if not &quot;/&quot; in windows[0]:&#10;        failed(&quot;Use / operator&quot;)&#10;        return&#10;    if not &quot;%&quot; in windows[1]:&#10;        failed(&quot;Use % operator&quot;)&#10;        return&#10;    if &quot;number&quot; in windows[0] and &quot;number&quot; in windows[1]:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use the value stored in the variable \&quot;number\&quot;&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use / and % operators&quot;)&#10;    test_windows()&#10;    test_division()&#10;    test_remainder()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887373000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="arithmetic_operators.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use / operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="22" />
                                                <option name="offset" value="45" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="22" />
                                            <option name="offset" value="45" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="divide 'number' by two" />
                                            <option name="possibleAnswer" value="number / 2" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use % operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="23" />
                                                <option name="offset" value="81" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="23" />
                                            <option name="offset" value="81" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="calculate the remainder" />
                                            <option name="possibleAnswer" value="number % 2" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="arithmetic_operators.py" />
                                      <option name="text" value="number = 9.0        # float number&#10;&#10;result = divide 'number' by two&#10;&#10;remainder = calculate the remainder&#10;&#10;print(&quot;result = &quot; + str(result))&#10;print(&quot;remainder = &quot; + str(remainder))&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Augmented assignment is a single statement combining a binary operation and an assignment statement such as &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, etc.&#10;&lt;br&gt;&lt;br&gt;&#10;Use an augmented assignment to add &lt;code&gt;5&lt;/code&gt; to &lt;code&gt;number&lt;/code&gt; and update the variable.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="Assignments" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407177" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if file.number == 12.0:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use += operator&quot;)&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;+=&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use += operator&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;You should modify the file&quot;)&#10;    test_value()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532886995000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="assignments.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use += operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="100" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="100" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="operator" />
                                            <option name="possibleAnswer" value="+=" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="assignments.py" />
                                      <option name="text" value="number = 9.0&#10;print(&quot;number = &quot; + str(number))&#10;&#10;number -= 2&#10;print(&quot;number = &quot; + str(number))&#10;&#10;number operator 5&#10;&#10;print(&quot;number = &quot; + str(number))&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Boolean is a type of value that can only be &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&#10;The &lt;code&gt;==&lt;/code&gt; (equality) operator checks whether the two variables being compared are equal.&#10;&lt;br&gt;&lt;br&gt;&#10;Check whether the variable &lt;code&gt;two&lt;/code&gt; is equal to &lt;code&gt;three&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="7" />
                            <option name="name" value="Boolean operators" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407178" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if not file.is_equal:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use == operator&quot;)&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;==&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use == operator&quot;)&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;You should modify the file&quot;)&#10;&#10;    test_value()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532886996000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="boolean_operators.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use == operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="34" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="34" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="operator" />
                                            <option name="possibleAnswer" value="==" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="boolean_operators.py" />
                                      <option name="text" value="two = 2&#10;three = 3&#10;&#10;is_equal = two operator three&#10;&#10;print(is_equal)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Python has many types of comparison operators including &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, etc. All comparison operations in Python have the same priority.&#10;Comparisons yield boolean values: either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Comparisons can be chained arbitrarily.&#10;&lt;br&gt;&lt;br&gt;&#10;Check whether the value of the variable &lt;code&gt;three&lt;/code&gt; is strictly greater than the value of the variable &lt;code&gt;two&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="8" />
                            <option name="name" value="Comparison operators" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407179" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if file.is_greater:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use &gt; operator&quot;)&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;&gt;&quot; in window and &quot;&gt;=&quot; not in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use &gt; operator&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;You should modify the file&quot;)&#10;    test_value()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532886996000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="comparison_operators.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use &gt; operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="188" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="188" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="operator" />
                                            <option name="possibleAnswer" value="&gt;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="comparison_operators.py" />
                                      <option name="text" value="one = 1&#10;two = 2&#10;three = 3&#10;&#10;print(one &lt; two &lt; three)  # This chained comparison means that the (one &lt; two) and (two &lt; three) comparisons are performed at the same time.&#10;&#10;is_greater = three operator two&#10;print(is_greater)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93091" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118663" />
                      <option name="index" value="3" />
                      <option name="name" value="Strings" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887010000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Combining two strings using the &lt;code&gt;+&lt;/code&gt; symbol is called concatenation.&#10;&lt;br&gt;&lt;br&gt;&#10;Use the &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;world&lt;/code&gt; variables to get a &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; string.&#10;&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Concatenation" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407180" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;hello_world&quot;) and file.hello_world == &quot;HelloWorld&quot;:&#10;        failed(&quot;Use one-space string ' ' in concatenation.&quot;)&#10;    else:&#10;        passed()&#10;&#10;&#10;def test_value_2():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;hello_world&quot;) and file.hello_world == &quot;Hello World&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use + operator&quot;)&#10;&#10;def test_concat_used():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;hello&quot; in window and &quot;world&quot; in window and &quot;+&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use previously defined variables and concatenation (+) to combine variables&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_value()&#10;    test_value_2()&#10;    test_concat_used()&#10;&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887000000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="concatenation.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use chained concatenation and one-space string \&quot; \&quot;." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="47" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="47" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="hello + ' ' + world" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="concatenation.py" />
                                      <option name="text" value="hello = &quot;Hello&quot;&#10;world = 'World'&#10;&#10;hello_world = type here&#10;print(hello_world)      # Note: you should print &quot;Hello World&quot;&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Python supports a string-by-number multiplication (but not the other way around!).&#10;&lt;br&gt;&lt;br&gt;&#10;Use hello to get the &lt;code&gt;&quot;hellohellohellohellohellohellohellohellohellohello&quot;&lt;/code&gt; string (&lt;code&gt;&quot;hello&quot;&lt;/code&gt; repeated &lt;code&gt;10&lt;/code&gt; times).&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="String multiplication" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407181" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;ten_of_hellos&quot;) and file.ten_of_hellos == &quot;hellohellohellohellohellohellohellohellohellohello&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use multiplication&quot;)&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;*&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use multiplication&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;You should modify the file&quot;)&#10;&#10;    test_value()&#10;    test_window()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887001000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="string_multiplication.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use multiplication." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="8" />
                                                <option name="offset" value="38" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="8" />
                                            <option name="offset" value="38" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="operator" />
                                            <option name="possibleAnswer" value="*" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="string_multiplication.py" />
                                      <option name="text" value="hello = &quot;hello&quot;&#10;ten_of_hellos = hello operator 10&#10;print(ten_of_hellos)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;You can access a character of a string if you know its position.&#10;For example, &lt;code&gt;str[index]&lt;/code&gt; will yield the character at&#10;position &lt;code&gt;index&lt;/code&gt; in the string &lt;code&gt;str&lt;/code&gt;.&#10;&lt;br/&gt;&#10;Note that string index always starts at &lt;code&gt;0&lt;/code&gt;.&#10;&lt;br&gt;&#10;Indices may also be negative numbers, to start counting from the right. Note that since &lt;code&gt;-0&lt;/code&gt; is the same as &lt;code&gt;0&lt;/code&gt;, negative indices start from &lt;code&gt;-1&lt;/code&gt;.&#10;&#10;&#10;&lt;br&gt;&lt;br&gt;&#10;Use index operator to get &lt;code&gt;&quot;P&quot;&lt;/code&gt; from &lt;code&gt;&quot;python&quot;&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="String indexing" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407182" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;[&quot; in window and &quot;0&quot; in window and &quot;]&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use indexing&quot;)&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;p_letter&quot;) and file.p_letter == &quot;P&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;String index starts at 0.&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;&#10;    test_value()&#10;    test_window()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887002000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="string_indexing.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Note that index starts with 0." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="96" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="96" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="python[0]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="string_indexing.py" />
                                      <option name="text" value="python = &quot;Python&quot;&#10;print(&quot;h &quot; + python[3])     # Note: string indexing starts with 0&#10;&#10;p_letter = type here&#10;print(p_letter)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;You can use negative numbers in the indexing operator to count characters ‘backwards’ from the end of the string.&#10;&lt;br&gt;&lt;br&gt;&#10;Use negative index to get the &lt;code&gt;'!'&lt;/code&gt; sign from &lt;code&gt;long_string&lt;/code&gt;&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="String negative indexing" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407183" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;exclamation&quot;) and file.exclamation == &quot;!&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use -1 index to get the last character&quot;)&#10;&#10;&#10;def test_negative_index():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;-&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use negative index&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;&#10;    test_negative_index()&#10;    test_value()&#10;&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887003000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="negative_indexing.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use negative index." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="58" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="58" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="long_string[-1]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="negative_indexing.py" />
                                      <option name="text" value="long_string = &quot;This is a very long string!&quot;&#10;exclamation = type here&#10;print(exclamation)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Slicing is used to get multiple characters (a substring) from a string.&#10;Its syntax is similar to that of indexing, but instead of just one index you use two indices (numbers)&#10;separated by a colon, e.g. &lt;code&gt;str[ind1:ind2]&lt;/code&gt;.&#10;&#10;&lt;h5&gt;Example&lt;/h5&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;str[start:end] # items start through end-1&#10;str[start:]    # items start through the rest of the array&#10;str[:end]      # items from the beginning through end-1&#10;str[:]         # a copy of the whole array&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;Use slicing to get &lt;code&gt;&quot;Python&quot;&lt;/code&gt; from the &lt;code&gt;monty_python&lt;/code&gt; variable.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="String slicing" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407184" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;python&quot;) and file.python == &quot;Python&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;Check indices used in slicing&quot;)&#10;&#10;&#10;def test_monty_python():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;monty_python&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use slicing&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_value()&#10;    test_monty_python()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887003000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="slicing.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="You can leave one or both indices empty." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="167" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="167" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="monty_python[6:]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="slicing.py" />
                                      <option name="text" value="monty_python = &quot;Monty Python&quot;&#10;monty = monty_python[:5]      # one or both index could be dropped. monty_python[:5] is equal to monty_python[0:5]&#10;print(monty)&#10;python = type here&#10;print(python)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;If you want to check whether a string contains a specific letter or a substring, you can use the &lt;code&gt;in&lt;/code&gt; keyword.&#10;&lt;br&gt;&lt;br&gt;&#10;Check if there is &lt;code&gt;&quot;ice&quot;&lt;/code&gt; in &lt;code&gt;&quot;ice cream&quot;&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="6" />
                            <option name="name" value="In operator" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407185" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;contains&quot;) and file.contains:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use 'in' operator for this check&quot;)&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;&#10;    if &quot; in &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use 'in' operator for this check&quot;)&#10;&#10;def test_ice_cream():&#10;    window = get_answer_placeholders()[0]&#10;&#10;    if &quot;ice cream&quot; in window or &quot;ice_cream&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;Check if there is 'ice' in 'ice cream'&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;&#10;    test_value()&#10;    test_window()&#10;    test_ice_cream()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887004000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="in_operator.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use 'in' operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="99" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="99" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="'ice' in ice_cream" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="in_operator.py" />
                                      <option name="text" value="ice_cream = &quot;ice cream&quot;&#10;print(&quot;cream&quot; in ice_cream)    # print boolean result directly&#10;&#10;contains = type here&#10;print(contains)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;The &lt;code&gt;len()&lt;/code&gt; function is used to count how many characters a string contains.&#10;&lt;br&gt;&lt;br&gt;&#10;Get the first half of the string stored in the variable &lt;code&gt;phrase&lt;/code&gt;. &lt;br&gt;&#10;Note: Remember about type conversion.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="7" />
                            <option name="name" value="String length" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407186" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders, get_file_output&#10;&#10;&#10;def test_value():&#10;    output = get_file_output()&#10;    answer = ['It is a really long string', 'triple-quoted st']&#10;    if 'to define multi-line strings' in output:&#10;        failed(&quot;Too long string in the output&quot;)&#10;    else:&#10;        passed()&#10;&#10;    if all(word in output for word in answer):&#10;        passed()&#10;    else:&#10;        failed(&quot;Too short string in the output&quot;)&#10;&#10;def test_value_python3():&#10;    import sys&#10;    if sys.version[0] != &quot;3&quot;:&#10;        passed()&#10;        return&#10;    try:&#10;        import_task_file()&#10;        passed()&#10;    except TypeError:&#10;        failed(&quot;Division operator returns float in Python 3. Use int() function to convert float to integer.&quot;)&#10;&#10;if __name__ == '__main__':&#10;    test_value_python3()&#10;    run_common_tests()&#10;&#10;    test_value()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887005000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="len_function.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Remember about string slicing." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="117" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="117" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="phrase[:int(len(phrase)/2)]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="len_function.py" />
                                      <option name="text" value="phrase = &quot;&quot;&quot;&#10;It is a really long string&#10;triple-quoted strings are used&#10;to define multi-line strings&#10;&quot;&quot;&quot;&#10;first_half = type here&#10;print(first_half)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Backslash is used to escape single or double quotation marks,&#10;for example &lt;code&gt;'It\'s me'&lt;/code&gt; or &lt;code&gt;&quot;She said \&quot;Hello\&quot;&quot;&lt;/code&gt;.&#10;The special symbol &lt;code&gt;'\n'&lt;/code&gt; is used to add a line break to a string.&#10;&lt;br&gt;&#10;Single quotation mark could be used in double quoted string without escaping and vice versa.&#10;&lt;br&gt;&lt;br&gt;&#10;Print out the following text using one string:&lt;br&gt;&#10;The name of this ice-cream is &quot;Sweet'n'Tasty&quot;&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="8" />
                            <option name="name" value="Character escaping" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407187" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, get_answer_placeholders, passed, failed, get_file_output&#10;&#10;&#10;def test_value():&#10;    window = get_answer_placeholders()[0]&#10;&#10;    first = &quot;The name of this ice-cream is \\\&quot;Sweet'n'Tasty\\\&quot;&quot;&#10;    second = 'The name of this ice-cream is &quot;Sweet\\\'n\\\'Tasty&quot;'&#10;&#10;    if first in window or second in window:&#10;        passed()&#10;    else:&#10;        if '\\\&quot;Sweet' in window or 'Tasty\\\&quot;' in window:&#10;            failed(&quot;There is no need to escape double quotation mark in single quoted string&quot;)&#10;        failed(&quot;Sorry, the wrong string is printed&quot;)&#10;&#10;&#10;def test_output():&#10;    output = get_file_output()&#10;    index = output.index('''\&quot;Sweet\&quot; is an ice-cream''')&#10;    if index &gt; 0:&#10;        if len(output) &gt; index + 2:&#10;            failed(&quot;Print output in one line&quot;)&#10;    passed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_output()&#10;    test_value()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887006000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="character_escaping.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use backslash \\ to escape quotes." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="4" />
                                                <option name="offset" value="105" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="4" />
                                            <option name="offset" value="105" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="text" />
                                            <option name="possibleAnswer" value="The name of this ice-cream is &quot;Sweet\'n\'Tasty&quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="character_escaping.py" />
                                      <option name="text" value="dont_worry = &quot;Don't worry about apostrophes&quot;&#10;print(dont_worry)&#10;print(&quot;\&quot;Sweet\&quot; is an ice-cream&quot;)&#10;print('text')&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;There are a lot of useful string methods. You can use the &lt;code&gt;lower()&lt;/code&gt;&#10;method to get rid of any capitalization in your strings.&#10;The &lt;code&gt;upper()&lt;/code&gt; method is used to make a string uppercase.&#10;To call any string method, type a dot after the string (or a variable containing the string)&#10;and the method name after it, e.g. &lt;code&gt;&quot;John&quot;.upper()&lt;/code&gt;.&#10;In PyCharm, you can explore all available string methods by using Ctrl+Space after a dot.&#10;&lt;br&gt;&lt;br&gt;&#10;Print &lt;code&gt;monty_python&lt;/code&gt; in upper case.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="9" />
                            <option name="name" value="Basic string methods" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407188" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    window = get_answer_placeholders()[0]&#10;&#10;    if &quot;monty_python.upper()&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use upper() method&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_value()&#10;&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887007000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="string_methods.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Look at the lower() method usage." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="24" />
                                                <option name="offset" value="131" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="24" />
                                            <option name="offset" value="131" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="upper cased monty_python" />
                                            <option name="possibleAnswer" value="monty_python.upper()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="string_methods.py" />
                                      <option name="text" value="monty_python = &quot;Monty Python&quot;&#10;print(monty_python)&#10;&#10;print(monty_python.lower())    # print lower-cased version of the string&#10;&#10;print(upper cased monty_python)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;The &lt;code&gt;%&lt;/code&gt; operator after a string is used to combine a string with variables.&#10;The &lt;code&gt;%&lt;/code&gt; operator will replace &lt;code&gt;%s&lt;/code&gt; in a string with the string variable that comes after it.&#10;The &lt;code&gt;%d&lt;/code&gt; special symbol is used as a placeholder for numeric or decimal values.&#10;&lt;br&gt;&lt;br&gt;&#10;Tell PyCharm how old you are.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="10" />
                            <option name="name" value="String formatting" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407189" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, get_answer_placeholders, import_task_file, get_file_output&#10;&#10;&#10;def test_window1():&#10;    windows = get_answer_placeholders()&#10;&#10;    if windows[1].isdigit():&#10;        passed()&#10;        return&#10;    else:&#10;        output = get_file_output()&#10;        if len(output) &gt; 1:&#10;            import re&#10;&#10;            p = re.compile(&quot;I'm (\d*) years old&quot;)&#10;            if p.match(output[1]) is not None:&#10;                passed()&#10;                return&#10;    failed(&quot;Print digit&quot;)&#10;&#10;&#10;def test_window():&#10;    windows = get_answer_placeholders()&#10;&#10;    if windows[0] == &quot;%d&quot;:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use %d special symbol&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()&#10;    test_window1()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887008000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="string_formatting.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use %d special symbol." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="14" />
                                                <option name="offset" value="132" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="14" />
                                            <option name="offset" value="132" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="special symbol" />
                                            <option name="possibleAnswer" value="%d" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="How old are you?" />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="5" />
                                                <option name="offset" value="160" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="5" />
                                            <option name="offset" value="160" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="years" />
                                            <option name="possibleAnswer" value="17" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="string_formatting.py" />
                                      <option name="text" value="name = &quot;John&quot;&#10;print(&quot;Hello, PyCharm! My name is %s!&quot; % name)     # Note: %s is inside the string, % is after the string&#10;&#10;print(&quot;I'm special symbol years old&quot; % years)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93092" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118664" />
                      <option name="index" value="4" />
                      <option name="name" value="Data structures" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887380000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;A list is a data structure you can use to store a collection of different pieces of information under a single variable name.&#10;A list can be written as an array of comma-separated values (items) between square brackets,&#10;e.g. &lt;code&gt;lst = [item1, item2]&lt;/code&gt;.&#10;Lists might contain items of different types, but usually all the items in the list are of the same type.&#10;Like strings, lists can be indexed and sliced (see &lt;a href=&quot;#lesson3#task3#&quot;&gt;Lesson 3&lt;/a&gt;).&#10;&lt;br&gt;&lt;br&gt;&#10;Use list slicing to print &lt;code&gt;[4, 9, 16]&lt;/code&gt;.&#10;&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Lists introduction" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407190" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, get_answer_placeholders, passed, failed, get_file_output, test_file_importable&#10;&#10;&#10;def test_value():&#10;    output = get_file_output()[1]&#10;    if &quot;[4, 9, 16]&quot; in output:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use list slicing lst[index1:index2]&quot;)&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;squares&quot; in window and &quot;[&quot; in window and &quot;]&quot; in window and &quot;:&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use list slicing lst[index1:index2]&quot;)&#10;&#10;if __name__ == '__main__':&#10;    test_file_importable()&#10;    test_value()&#10;    test_window()&#10;    run_common_tests(&quot;Use list slicing lst[index1:index2]&quot;)&#10;&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887012000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="lists.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use list slicing lst[index1:index2]" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="5" />
                                                <option name="offset" value="70" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="5" />
                                            <option name="offset" value="70" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="slice" />
                                            <option name="possibleAnswer" value="squares[1:4]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="lists.py" />
                                      <option name="text" value="squares = [1, 4, 9, 16, 25]   # create new list&#10;print(squares)&#10;&#10;print(slice)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;You can add new items at the end of the list, by using the &lt;code&gt;append()&lt;/code&gt; method and concatenation.&#10;Unlike strings, lists are a mutable type, i.e. it is possible to change their content using&#10;&lt;code&gt;lst[index] = new_item&lt;/code&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;Replace &lt;code&gt;'dino'&lt;/code&gt; with &lt;code&gt;'dinosaur'&lt;/code&gt; in the &lt;code&gt;animals&lt;/code&gt; list.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Lists operations" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407191" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, import_task_file, passed, failed, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;animals&quot;) and &quot;dinosaur&quot; in file.animals and not &quot;dino&quot; in file.animals:&#10;        passed()&#10;    else:&#10;        failed(&quot;Replace 'dino' with 'dinosaur'&quot;)&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;animals&quot; in window and &quot;[&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Replace 'dino' with 'dinosaur'&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use indexing and assignment&quot;)&#10;    test_value()&#10;    test_window()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887013000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="list_operations.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use indexing operation and assignment." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="30" />
                                                <option name="offset" value="257" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="30" />
                                            <option name="offset" value="257" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="replace 'dino' with 'dinosaur'" />
                                            <option name="possibleAnswer" value="animals[-1] = 'dinosaur'" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="list_operations.py" />
                                      <option name="text" value="animals = ['elephant', 'lion', 'tiger', &quot;giraffe&quot;]  # create new list&#10;print(animals)&#10;&#10;animals += [&quot;monkey&quot;, 'dog']    # add two items to the list&#10;print(animals)&#10;&#10;animals.append(&quot;dino&quot;)   # add one more item to the list using append() method&#10;print(animals)&#10;&#10;replace 'dino' with 'dinosaur'&#10;print(animals)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Assignment to slices is also possible, and this can even change the size of a list or clear it entirely.&#10;&lt;br&gt;&lt;br&gt;&#10;Clear &lt;code&gt;animals&lt;/code&gt; list.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="List items" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407192" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, import_task_file, get_answer_placeholders&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;animals&quot;) and not file.animals:&#10;        passed()&#10;    else:&#10;        failed(&quot;Clear animals list&quot;)&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;animals&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Clear animals list&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use assignment to empty list&quot;)&#10;    test_window()&#10;    test_value()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887013000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="list_items.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use assignment to an empty list []." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="10" />
                                                <option name="offset" value="301" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="10" />
                                            <option name="offset" value="301" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="clear list" />
                                            <option name="possibleAnswer" value="animals[:] = []" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="list_items.py" />
                                      <option name="text" value="animals = ['elephant', 'lion', 'tiger', &quot;giraffe&quot;, &quot;monkey&quot;, 'dog']   # create new list&#10;print(animals)&#10;&#10;animals[1:3] = ['cat']    # replace 2 items -- 'lion' and 'tiger' with one item -- 'cat'&#10;print(animals)&#10;&#10;animals[1:3] = []     # remove 2 items -- 'cat' and 'giraffe' from the list&#10;print(animals)&#10;&#10;clear list&#10;print(animals)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Tuples are almost identical to lists. The only significant difference between tuples and lists is that&#10;tuples cannot be changed:&#10;you cannot add, change, or delete elements from the tuple.&#10;Tuples are constructed by a comma operator enclosed in parentheses, for example &lt;code&gt;(a, b, c)&lt;/code&gt;.&#10;A single item tuple must have a trailing comma, such as &lt;code&gt;(d,)&lt;/code&gt;.&#10;&#10;&lt;br&gt;&lt;br&gt;&#10;Print the length of the &lt;code&gt;alphabet&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Tuples" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407193" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;len(&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use len() function&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use len() function&quot;)&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887014000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="tuples.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use len() function." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="15" />
                                                <option name="offset" value="161" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="15" />
                                            <option name="offset" value="161" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="alphabet length" />
                                            <option name="possibleAnswer" value="len(alphabet)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="tuples.py" />
                                      <option name="text" value="alphabet = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',&#10;            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')&#10;&#10;print(alphabet length)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;The &lt;code&gt;in&lt;/code&gt; keyword is used to check if a list or  contains a specific item, check whether the tomato is in the list.&#10;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="In keyword" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407194" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;in&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use in keyword&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use in keyword&quot;)&#10;    test_window()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887380000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="in_keyword.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Try using the new keyword to check the list for an item&#10;" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="7" />
                                                <option name="offset" value="80" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="7" />
                                            <option name="offset" value="80" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="keyword" />
                                            <option name="possibleAnswer" value="in" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="in_keyword.py" />
                                      <option name="text" value="grocery_list = [&quot;fish&quot;, &quot;tomato&quot;, 'apples']   # create new list&#10;&#10;print(&quot;tomato&quot; keyword grocery_list)    # check that grocery_list contains &quot;tomato&quot; item&#10;&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93093" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118665" />
                      <option name="index" value="5" />
                      <option name="name" value="Condition expressions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887022000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Boolean operators compare statements and return results in boolean values.&#10;The boolean operator &lt;code&gt;and&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; when the expressions on both sides of &lt;code&gt;and&lt;/code&gt; are &lt;code&gt;True&lt;/code&gt;.&#10;The boolean operator &lt;code&gt;or&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; when at least one expression on either side of &lt;code&gt;or&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&#10;The boolean operator &lt;code&gt;not&lt;/code&gt; inverts the boolean expression it precedes.&#10;&lt;br&gt;&lt;br&gt;&#10;Check if &lt;code&gt;name&lt;/code&gt; is equal to &lt;code&gt;&quot;John&quot;&lt;/code&gt; and he is not &lt;code&gt;23&lt;/code&gt; years old.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Boolean operators" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407195" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;name&quot; in window and &quot;John&quot; in window and &quot;and&quot; in window and &quot;23&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use 'and' keyword and != operator&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use 'and' keyword and != operator&quot;)&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887018000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="boolean_operators.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use and keyword and != operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="24" />
                                                <option name="offset" value="132" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="24" />
                                            <option name="offset" value="132" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="John is not 23 years old" />
                                            <option name="possibleAnswer" value="name == 'John' and age != 23" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="boolean_operators.py" />
                                      <option name="text" value="name = &quot;John&quot;&#10;age = 17&#10;&#10;print(name == &quot;John&quot; or age == 17)    # checks that either name equals to &quot;John&quot; OR age equals to 17&#10;&#10;print(John is not 23 years old)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Boolean operators are not evaluated from left to right. There's an order of operations for boolean operators:&#10;&lt;code&gt;not&lt;/code&gt; is evaluated first, &lt;code&gt;and&lt;/code&gt; is evaluated next, &lt;code&gt;or&lt;/code&gt; is evaluated last.&#10;&lt;br&gt;&lt;br&gt;&#10;Check if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;&quot;Ellis&quot;&lt;/code&gt; or&#10;it's not true that &lt;code&gt;name&lt;/code&gt; equal &lt;code&gt;&quot;John&quot;&lt;/code&gt; and&#10;he is &lt;code&gt;17&lt;/code&gt; years old at the same time.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Boolean operators order" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407196" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot; and &quot; in window and &quot; or &quot; in window and &quot; not &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use 'and', 'or' and 'not' keywords&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use 'and', 'or' and 'not' keywords&quot;)&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887019000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="boolean_order.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Combine 'and', 'or' and 'not' keywords." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="69" />
                                                <option name="offset" value="108" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="69" />
                                            <option name="offset" value="108" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="&quot;name&quot; is &quot;Ellis&quot; or not (&quot;name&quot; equal &quot;John&quot; and he is 17 years old)" />
                                            <option name="possibleAnswer" value="name is &quot;Ellis&quot; or not (name is &quot;John&quot; and age == 17)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="boolean_order.py" />
                                      <option name="text" value="name = &quot;John&quot;&#10;age = 17&#10;&#10;print(name == &quot;John&quot; or not age &gt; 17)&#10;&#10;print(name == &quot;John&quot; or not age &gt; 17)&#10;&#10;print(&quot;name&quot; is &quot;Ellis&quot; or not (&quot;name&quot; equal &quot;John&quot; and he is 17 years old))&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;The &lt;code&gt;if&lt;/code&gt; keyword is used to form a conditional statement that executes some specified code after checking if its expression is &lt;code&gt;True&lt;/code&gt;.&#10;Python uses indentation to define code blocks.&#10;&lt;br&gt;&lt;br&gt;&#10;Print &lt;code&gt;&quot;empty&quot;&lt;/code&gt; if the &lt;code&gt;tasks&lt;/code&gt; list is empty.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="If statement" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407197" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;:&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Don't forget a column at the end&quot;)&#10;&#10;&#10;def test_len():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;len&quot; in window:&#10;        passed()&#10;    elif &quot;not&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use len function to check that tasks is empty&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()&#10;    test_len()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887020000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="if_statement.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use len function to check if tasks is empty." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="25" />
                                                <option name="offset" value="236" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="25" />
                                            <option name="offset" value="236" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="check if 'tasks' is empty" />
                                            <option name="possibleAnswer" value="if len(tasks) == 0:" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="if_statement.py" />
                                      <option name="text" value="name = &quot;John&quot;&#10;age = 17&#10;&#10;if name == &quot;John&quot; or age == 17:   # check that name is &quot;John&quot; or age is 17. If so print next 2 lines.&#10;    print(&quot;name is John&quot;)&#10;    print(&quot;John is 17 years old&quot;)&#10;&#10;tasks = ['task1', 'task2']    # create new list&#10;&#10;check if 'tasks' is empty&#10;    print(&quot;empty&quot;)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;The &lt;code&gt;else&lt;/code&gt; statement complements the &lt;code&gt;if&lt;/code&gt;&#10;statement. The &lt;code&gt;elif&lt;/code&gt; keyword is short for &quot;else if&quot;.&#10;&lt;br&gt;&lt;br&gt;&#10;Print &lt;code&gt;True&lt;/code&gt; if name is equal to &lt;code&gt;&quot;John&quot;&lt;/code&gt;&#10;and &lt;code&gt;False&lt;/code&gt; otherwise.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Else, elif part in if statement" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407198" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, get_answer_placeholders, passed, failed&#10;&#10;&#10;def test_window1():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;John&quot; in window and &quot;if &quot; in window:&#10;        if &quot;==&quot; in window or &quot;is&quot; in window:&#10;            passed()&#10;        else:&#10;            failed(&quot;Check equality&quot;)&#10;    else:&#10;        failed(&quot;Use if keyword&quot;)&#10;&#10;&#10;def test_window2():&#10;    window = get_answer_placeholders()[1]&#10;    if &quot;else&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use else keyword&quot;)&#10;&#10;&#10;def test_columns():&#10;    windows = get_answer_placeholders()&#10;    if &quot;:&quot; in windows[0] and &quot;:&quot; in windows[1]:&#10;        passed()&#10;    else:&#10;        failed(&quot;Don't forget a colon at the end&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests(&quot;Use if/else keywords&quot;)&#10;    test_window1()&#10;    test_window2()&#10;    test_columns()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887021000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="else_elif.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use if keyword and == operator." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="29" />
                                                <option name="offset" value="352" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="29" />
                                            <option name="offset" value="352" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="check if name equal to &quot;John&quot;" />
                                            <option name="possibleAnswer" value="if name == 'John':" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use else keyword." />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="398" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="398" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="otherwise" />
                                            <option name="possibleAnswer" value="else:" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="else_elif.py" />
                                      <option name="text" value="x = 28&#10;&#10;if x &lt; 0:&#10;    print('x &lt; 0')                      # executes only if x &lt; 0&#10;elif x == 0:&#10;    print('x is zero')                 # if it's not true that x &lt; 0, check if x == 0&#10;elif x == 1:&#10;    print('x == 1')                    # if it's not true that x &lt; 0 and x != 0, check if x == 1&#10;else:&#10;    print('non of the above is true')&#10;&#10;name = &quot;John&quot;&#10;&#10;check if name equal to &quot;John&quot;&#10;    print(True)&#10;otherwise&#10;    print(False)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93094" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118666" />
                      <option name="index" value="6" />
                      <option name="name" value="Loops" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887029000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;code&gt;for&lt;/code&gt; loops are used to iterate over a given sequence.&#10;On each iteration, the variable defined in the &lt;code&gt;for&lt;/code&gt;&#10;loop will be assigned to the next value in the list.&#10;&#10;&lt;br&gt;&lt;br&gt;&#10;Print each prime number from the &lt;code&gt;primes&lt;/code&gt; list using the &lt;code&gt;for&lt;/code&gt; loop.&#10;A prime number is a natural number greater than &lt;code&gt;1&lt;/code&gt; that has no positive divisors other than &lt;code&gt;1&lt;/code&gt; and itself.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="For loop" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407199" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;prime&quot; in window and &quot;for &quot; in window and &quot;primes&quot; in window and &quot; in &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use for loop to iterate over 'primes'&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887024000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="for_loop.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use for loop to iterate over 'primes'." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="34" />
                                                <option name="offset" value="238" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="34" />
                                            <option name="offset" value="238" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="iterate over primes using for loop" />
                                            <option name="possibleAnswer" value="for prime in primes:" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="for_loop.py" />
                                      <option name="text" value="for i in range(5):    # for each number i in range 0-4. range(5) function returns list [0, 1, 2, 3, 4]&#10;    print(i)          # this line is executed 5 times. First time i equals 0, then 1, ...&#10;&#10;&#10;primes = [2, 3, 5, 7]   # create new list&#10;&#10;iterate over primes using for loop&#10;    print(prime)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Strings are very similar to lists in Python. You can use string to iterate over it.&#10;&lt;br&gt;&lt;br&gt;&#10;Use a loop to count how many characters &lt;code&gt;hello_world&lt;/code&gt; contains. Store this number in the &lt;code&gt;length&lt;/code&gt; variable.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="For loop using string" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407200" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, import_task_file&#10;&#10;&#10;def test_value():&#10;    file = import_task_file()&#10;    if hasattr(file, &quot;length&quot;) and file.length == 13:&#10;        passed()&#10;    else:&#10;        failed(&quot;Count again&quot;)&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;for &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use a for loop to iterate over the hello_world string&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()&#10;    test_value()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887025000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="for_string.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use for loop to iterate over 'hello_world' string." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="59" />
                                                <option name="offset" value="158" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="59" />
                                            <option name="offset" value="158" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="count how many characters are in the hello_world using loop" />
                                            <option name="possibleAnswer" value="for ch in hello_world:" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="for_string.py" />
                                      <option name="text" value="hello_world = &quot;Hello, World!&quot;&#10;&#10;for ch in hello_world:    # print each character from hello_world&#10;    print(ch)&#10;&#10;length = 0      # initialize length variable&#10;&#10;count how many characters are in the hello_world using loop&#10;    length += 1     # add 1 to the length on each iteration&#10;&#10;print(len(hello_world) == length)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;A &lt;code&gt;while&lt;/code&gt; loop is similar to an &lt;code&gt;if&lt;/code&gt; statement: it executes some code if some condition is true.&#10;The key difference is that it will continue to execute indented code for as long as the condition is &lt;code&gt;True&lt;/code&gt;.&#10;&lt;br&gt;&lt;br&gt;&#10;Print all squares from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;99&lt;/code&gt; &lt;code&gt;(1, 4, ... , 81)&lt;/code&gt;.&#10;Use &lt;code&gt;number&lt;/code&gt; variable in &lt;code&gt;while&lt;/code&gt; loop.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="While loop" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407201" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, get_file_output&#10;&#10;&#10;def test_column():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;:&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Don't forget a colon at the end&quot;)&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;while &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use a while loop to iterate&quot;)&#10;&#10;&#10;def test_window1():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;number&quot; in window:&#10;        passed()&#10;    elif 'square' in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use 'number' variable in the while condition&quot;)&#10;&#10;&#10;def test_window2():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;10&quot; in window:&#10;        if &quot;&lt;&quot; in window or &quot;10 &gt;&quot; in window:&#10;            passed()&#10;    elif 'square' in window:&#10;        if &quot;&lt;&quot; and &quot;81&quot; in window:&#10;            passed()&#10;    else:&#10;        failed(&quot;Check that 'number' is strictly less than 10 in the condition&quot;)&#10;&#10;&#10;def test_output():&#10;    output = get_file_output()&#10;    if &quot;Finished&quot; not in output:&#10;        failed(&quot;Sorry, this answer is wrong&quot;)&#10;        return&#10;    border = output.index(&quot;Finished&quot;)&#10;    user_squares = output[border + 1:]&#10;    user_squares = [x for x in user_squares if x]&#10;    correct_answer = list(map(str, [x * x for x in range(1, 10)]))&#10;    if correct_answer == user_squares:&#10;        passed()&#10;    else:&#10;        failed(&quot;Sorry, this answer is wrong&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()&#10;    test_window1()&#10;    test_window2()&#10;    test_column()&#10;    test_output()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887026000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="while_loop.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Check if 'number' is strictly less than 10 in condition." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="30" />
                                                <option name="offset" value="213" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="30" />
                                            <option name="offset" value="213" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="print all squares from 0 to 99" />
                                            <option name="possibleAnswer" value="while square &lt; 81:" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="while_loop.py" />
                                      <option name="text" value="square = 1&#10;&#10;while square &lt;= 10:&#10;    print(square)    # This code is executed 10 times&#10;    square += 1      # This code is executed 10 times&#10;&#10;print(&quot;Finished&quot;)  # This code is executed once&#10;&#10;square = 0&#10;number = 1&#10;&#10;print all squares from 0 to 99&#10;    square = number ** 2&#10;    print(square)&#10;    number += 1&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;An infinite loop is a loop that never exits. If the loop condition happens to always be &lt;code&gt;True&lt;/code&gt;, such a loop becomes infinite.&#10;The &lt;code&gt;break&lt;/code&gt; keyword is used to exit the current loop.&#10;&lt;br&gt;&lt;br&gt;&#10;Exit the loop correctly using &lt;code&gt;break&lt;/code&gt; statement.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Break keyword" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407202" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;elephant&quot; in window and &quot;animal&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use == to check that animal is equal to 'elephant'&quot;)&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887027000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="break_keyword.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use == to check if animal is equal to 'elephant'." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="33" />
                                                <option name="offset" value="377" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="33" />
                                            <option name="offset" value="377" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="exit loop if animal is 'elephant'" />
                                            <option name="possibleAnswer" value="animal == 'elephant'" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="break_keyword.py" />
                                      <option name="text" value="count = 0&#10;&#10;while True:  # this condition cannot possibly be false&#10;    print(count)&#10;    count += 1&#10;    if count &gt;= 5:&#10;        break           # exit loop if count &gt;= 5&#10;&#10;&#10;zoo = [&quot;lion&quot;, 'tiger', 'elephant']&#10;while True:                         # this condition cannot possibly be false&#10;    animal = zoo.pop()       # extract one element from the list end&#10;    print(animal)&#10;    if exit loop if animal is 'elephant':&#10;        break           # exit loop&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;The &lt;code&gt;continue&lt;/code&gt; keyword is used to skip the rest of the code inside the loop for the currently executed loop and return to the &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; statement.&#10;&lt;br&gt;&lt;br&gt;&#10;Print only odd the numbers &lt;code&gt;1, 3, 5, 7, 9&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="5" />
                            <option name="name" value="Continue keyword" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407203" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, passed, failed, get_answer_placeholders, get_file_output&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;x&quot; in window and &quot;%&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use % operator to check that x is even&quot;)&#10;&#10;&#10;def test_output():&#10;    numbers = ['0', '2', '4', '6', '8']&#10;    output = get_file_output()&#10;    if len(output) &gt; 4:&#10;        output = output[4:]&#10;    if any(number in output for number in numbers):&#10;        failed(&quot;Print only odd the numbers&quot;)&#10;    else:&#10;        passed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_output()&#10;    test_window()&#10;" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887028000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="continue_keyword.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use % operator to check if x is even." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="18" />
                                                <option name="offset" value="154" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="18" />
                                            <option name="offset" value="154" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Check if x is even" />
                                            <option name="possibleAnswer" value="x % 2 == 0" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="continue_keyword.py" />
                                      <option name="text" value="for i in range(5):&#10;    if i == 3:&#10;        continue   # skip the rest of the code inside loop for current i value&#10;    print(i)&#10;&#10;for x in range(10):&#10;    if Check if x is even:&#10;        continue   # skip print(x) for this loop&#10;    print(x)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93095" />
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="118667" />
                      <option name="index" value="7" />
                      <option name="name" value="Functions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1532887035000" />
                      <option name="taskList">
                        <list>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Functions are a convenient way to divide your code into useful blocks, make it more readable and help reuse it.&#10;Functions are defined using the keyword &lt;code&gt;def&lt;/code&gt;, followed by the function's name.&#10;&#10;&lt;br&gt;&lt;br&gt;&#10;Define a function to replace duplicate lines in the file.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="1" />
                            <option name="name" value="Definition" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407204" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, get_answer_placeholders, passed&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;fun&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Name your function 'fun'&quot;)&#10;&#10;&#10;def test_window1():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;def &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Use 'def' keyword to define a function&quot;)&#10;&#10;&#10;def test_column():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;:&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Don't forget a colon at the end of the statement&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()&#10;    test_column()&#10;    test_window1()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887031000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="functions.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Use 'def' keyword to define 'fun' function." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="58" />
                                                <option name="offset" value="256" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="58" />
                                            <option name="offset" value="256" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="define a function named 'fun' to replace three lines above" />
                                            <option name="possibleAnswer" value="def fun():" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="functions.py" />
                                      <option name="text" value="def hello_world():  # function named my_function&#10;    print(&quot;Hello, World!&quot;)&#10;&#10;for i in range(5):&#10;    hello_world()   # call function defined above 5 times&#10;&#10;print('I want to be a function')&#10;print('I want to be a function')&#10;print('I want to be a function')&#10;&#10;&#10;define a function named 'fun' to replace three lines above&#10;    print('I want to be a function')&#10;&#10;for i in range(3):&#10;    fun()&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Function parameters are defined inside the parentheses &lt;code&gt;()&lt;/code&gt;, following the function name.&#10;A parameter acts as a variable name for the passed argument.&#10;&lt;br&gt;&lt;br&gt;&#10;Define a function that prints the square of the passed parameter.&#10;&lt;br&gt;&#10;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="2" />
                            <option name="name" value="Parameters and call arguments" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407205" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, get_answer_placeholders, passed&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;square&quot; in window and &quot;def &quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Name your function 'square'&quot;)&#10;&#10;&#10;def test_column():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;:&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Don't forget a colon at the end of the statement&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_column()&#10;    test_window()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887032000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="param_args.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Put parameter 'x' inside parentheses in function definition." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="71" />
                                                <option name="offset" value="159" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="71" />
                                            <option name="offset" value="159" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="define a function named 'square' that prints square of passed parameter" />
                                            <option name="possibleAnswer" value="def square(x):" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="param_args.py" />
                                      <option name="text" value="def foo(x):                 # x is a function parameter&#10;    print(&quot;x = &quot; + str(x))&#10;&#10;foo(5)   # pass 5 to foo(). Here 5 is an argument passed to function foo.&#10;&#10;define a function named 'square' that prints square of passed parameter&#10;    print(x ** 2)&#10;&#10;square(4)&#10;square(8)&#10;square(15)&#10;square(23)&#10;square(42)&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Functions may return a value to the caller, using the keyword &lt;code&gt;return&lt;/code&gt;. You can use the returned value to assign it to a variable or just print it out.&#10;&lt;br&gt;&lt;br&gt;&#10;In the Fibonacci sequence, the first two numbers are &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, and each subsequent number is the sum of the previous two.&#10;Write a function that returns a list of the numbers of the Fibonacci series up to &lt;code&gt;n&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="3" />
                            <option name="name" value="Return value" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407206" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, get_answer_placeholders, passed, failed, import_task_file&#10;&#10;def test_window1():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;1&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Initialize b with 1&quot;)&#10;&#10;&#10;def test_window2():&#10;    window = get_answer_placeholders()[1]&#10;    if &quot;b&quot; in window and &quot;a&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Update b with a + b&quot;)&#10;&#10;def test_window3():&#10;    window = get_answer_placeholders()[2]&#10;    if &quot;tmp_var&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Update a with tmp_var&quot;)&#10;&#10;def test_function():&#10;    try:&#10;        my_file = import_task_file()&#10;        if hasattr(my_file, &quot;fib&quot;) and my_file.fib(10) == [1, 1, 2, 3, 5, 8]:&#10;            passed()&#10;        else:&#10;            failed(&quot;Check your function for n = 10&quot;)&#10;    except:&#10;        failed(&quot;The file contains syntax errors&quot;)&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window1()&#10;    test_window2()&#10;    test_window3()&#10;    test_function()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887033000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="return_keyword.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Initialize 'b' with 1." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="21" />
                                                <option name="offset" value="373" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="21" />
                                            <option name="offset" value="373" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="initialize variable b" />
                                            <option name="possibleAnswer" value="1" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Update 'b' with 'a + b'." />
                                              </list>
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="17" />
                                                <option name="offset" value="465" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="17" />
                                            <option name="offset" value="465" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="update variable b" />
                                            <option name="possibleAnswer" value="b = a + b" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Update 'a' with 'tmp_var'." />
                                              </list>
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="17" />
                                                <option name="offset" value="491" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="17" />
                                            <option name="offset" value="491" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="update variable a" />
                                            <option name="possibleAnswer" value="a = tmp_var" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="return_keyword.py" />
                                      <option name="text" value="def sum_two_numbers(a, b):&#10;    return a + b            # return result to the function caller&#10;&#10;c = sum_two_numbers(3, 12)  # assign result of function execution to variable 'c'&#10;&#10;&#10;def fib(n):&#10;    &quot;&quot;&quot;This is documentation string for function. It'll be available by fib.__doc__()&#10;    Return a list containing the Fibonacci series up to n.&quot;&quot;&quot;&#10;    result = []&#10;    a = 1&#10;    b = initialize variable b&#10;    while a &lt; n:&#10;        result.append(a)&#10;        tmp_var = b&#10;        update variable b&#10;        update variable a&#10;    return result&#10;&#10;print(fib(10))&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                          <EduTask>
                            <option name="additionalFiles">
                              <map />
                            </option>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Sometimes it's useful to specify a default value for one or more function parameters.&#10;This creates a function that can be called with fewer arguments than it is defined to allow.&#10;&lt;br&gt;&lt;br&gt;&#10;Add parameters for the &lt;code&gt;hello&lt;/code&gt; function, and set a default value for the name parameter.&#10;&lt;br&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="index" value="4" />
                            <option name="name" value="Default parameters" />
                            <option name="status" value="Unchecked" />
                            <option name="stepId" value="407207" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="testsText">
                              <map>
                                <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_window():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;=&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Add a default value to the parameter&quot;)&#10;&#10;def test_window_names():&#10;    window = get_answer_placeholders()[0]&#10;    if &quot;subject&quot; in window and &quot;name&quot; in window:&#10;        passed()&#10;    else:&#10;        failed(&quot;Add a default value to the parameter&quot;)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_window()&#10;    test_window_names()" />
                              </map>
                            </option>
                            <option name="updateDate" value="1532887034000" />
                            <option name="taskFiles">
                              <map>
                                <entry key="default_parameter.py">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Set default value for parameter 'name'." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="55" />
                                                <option name="offset" value="158" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="55" />
                                            <option name="offset" value="158" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="add parameters for function, set default value for name" />
                                            <option name="possibleAnswer" value="subject, name='John'" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="userCreated" value="false" />
                                      <option name="name" value="default_parameter.py" />
                                      <option name="text" value="def multiply_by(a, b=2):&#10;    return a * b&#10;&#10;print(multiply_by(3, 47))&#10;print(multiply_by(3))    # call function using default value for b parameter&#10;&#10;&#10;def hello(add parameters for function, set default value for name):&#10;    print(&quot;Hello %s! My name is %s&quot; % (subject, name))&#10;&#10;hello(&quot;PyCharm&quot;, &quot;Jane&quot;)    # call 'hello' function with &quot;PyCharm as a subject parameter and &quot;Jane&quot; as a name&#10;hello(&quot;PyCharm&quot;)            # call 'hello' function with &quot;PyCharm as a subject parameter and default value for the name&#10;" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                          </EduTask>
                        </list>
                      </option>
                      <option name="unitId" value="93096" />
                    </Lesson>
                  </list>
                </option>
              </Section>
            </list>
          </option>
        </RemoteCourse>
      </option>
      <option name="VERSION" value="9" />
      <option name="myUserTests">
        <map />
      </option>
    </StudyTaskManager>
  </component>
</project>